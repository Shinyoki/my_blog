<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.senko</groupId>
    <artifactId>my_blog</artifactId>
    <packaging>pom</packaging>
    <version>0.2.0</version>
    <modules>
        <module>admin</module>
        <module>common</module>
        <module>framework</module>
        <module>system</module>
        <!--        有时候maven会抽风不能下载源码，decompiled的class怎么可能容易理解啊
                    莫得办法，图懒
                    mvn dependency:sources
                    mvn dependency:resolve -Dclassifier=javadoc
                    一套走完，但是捏，他是maven从仓库中下载，子项目引用自己的项目就得看源仓库有没有了，没有就会下载失败。
                    所以建议单独下载。
                    mvn dependency:sources -DincludeArtifactIds=springfox-boot-starter
                    -->
    </modules>
   <repositories>
       <repository>
           <id>central</id>
           <name>aliyun maven</name>
           <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
           <layout>default</layout>
           <!-- 是否开启发布版构件下载 -->
           <releases>
               <enabled>true</enabled>
           </releases>
           <!-- 是否开启快照版构件下载 -->
           <snapshots>
               <enabled>false</enabled>
           </snapshots>
       </repository>

   </repositories>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <druid.version>1.2.8</druid.version>
        <bitwalker.version>1.21</bitwalker.version>
        <kaptcha.version>2.3.2</kaptcha.version>
        <mybatis-spring-boot.version>2.2.2</mybatis-spring-boot.version>
        <pagehelper.boot.version>1.4.1</pagehelper.boot.version>
        <fastjson.version>1.2.80</fastjson.version>
        <oshi.version>6.1.2</oshi.version>
        <jna.version>5.10.0</jna.version>
        <commons.io.version>2.11.0</commons.io.version>
        <commons.fileupload.version>1.4</commons.fileupload.version>
        <commons.collections.version>3.2.2</commons.collections.version>
        <poi.version>4.1.2</poi.version>
        <velocity.version>2.3</velocity.version>
        <jwt.version>0.9.1</jwt.version>
        <spring.version>2.2.13.RELEASE</spring.version>
        <pool.version>2.11.1</pool.version>
        <mp.version>3.5.0</mp.version>
        <mysql.version>8.0.28</mysql.version>
        <lombok.version>1.18.24</lombok.version>
        <springboot.version>2.5.12</springboot.version>
    </properties>

    <!--    声明依赖，但是还未真正的映入-->
    <dependencyManagement>
        <dependencies>
            <!--Token生成与解析-->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jwt.version}</version>
            </dependency>


            <!--验证码 -->
            <dependency>
                <groupId>com.github.penggle</groupId>
                <artifactId>kaptcha</artifactId>
                <version>${kaptcha.version}</version>
            </dependency>


            <!-- SpringBoot的依赖配置-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.13.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- 阿里JSON解析器 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>


            <!--        对象池-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-pool2</artifactId>
                <version>${pool.version}</version>
            </dependency>

            <!--阿里数据库连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>


            <!--        mybatis-plus-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mp.version}</version>
            </dependency>

            <!--        (springBoot2.x 默认用的是8以上的，如果想更换，可以引入自己的)mysql 连接驱动-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <!--        lombok-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>

<!--            核心配置曾-->
            <dependency>
                <groupId>com.senko</groupId>
                <artifactId>framework</artifactId>
                <version>0.2.0</version>
            </dependency>

<!--           业务层 -->
            <dependency>
                <groupId>com.senko</groupId>
                <artifactId>system</artifactId>
                <version>0.2.0</version>
            </dependency>

<!--            底层公共模块-->
            <dependency>
                <groupId>com.senko</groupId>
                <artifactId>common</artifactId>
                <version>0.2.0</version>
            </dependency>

            <!-- pagehelper 分页插件 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.boot.version}</version>
                <exclusions>
                    <!-- 因为用的是mybatis-plus，所以要排除分页插件自带的mybatis -->
                    <exclusion>
                        <groupId>org.mybatis</groupId>
                        <artifactId>mybatis</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.mybatis</groupId>
                        <artifactId>mybatis-spring</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
        </plugins>


        <resources>
            <resource>
                <!-- xml放在java目录下-->
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>
